name: Deploy PROD Node App
on:
  push:
    tags:
      - "prod-v-*"
env:
  NODE_ENV: production  
  ECR_REPOSITORY: node-application-ecr
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
  SERVER_PUBLIC_IP: ${{ secrets.AWS_PUBLIC_IP }}    

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: |   
          if [ "$NODE_ENV" != "development" ] && [ "$NODE_ENV" != "stage" ] && [ "$NODE_ENV" != "production" ]; then
            echo "Invalid NODE_ENV: $NODE_ENV"
            exit 1
          fi
          npm test
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3      
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY}}
          IMAGE_TAG: ${{ github.sha }}
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"   

      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY}}
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION,NODE_ENV
          script: |-
            sudo apt update
            sudo apt install docker.io awscli -y
            sudo $(aws ecr get-login --no-include-email --region $AWS_REGION);
            sudo docker stop nodeapp-$NODE_ENV || true
            sudo docker rm nodeapp-$NODE_ENV || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name nodeapp-$NODE_ENV -p 3002:3000 $REGISTRY/$REPOSITORY:$IMAGE_TAG          